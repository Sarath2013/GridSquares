{"version":3,"sources":["Grid.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","connectedList","state","gridData","fillColor","hoverColor","gridN","curSelectedItem","rIndex","cIndex","curSelectedList","curHoverList","connectedCollec","type","isValid","this","selList","length","forEach","list","findIndex","obj","setState","push","i","findConnected","e","target","value","className","style","gridTemplateColumns","repeat","trim","slice","map","childArray","index","bgColor","textColor","hoverAffectIndex","count","backgroundColor","color","key","toString","onClick","squareActions","bind","onMouseEnter","onMouseLeave","min","max","id","onChange","sliderChange","fillColorChange","hoverColorChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3a1c7fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Grid extends Component {\r\n    connectedList = [];\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gridData: [\r\n                [0, 0, 0, 0, 1],\r\n                [1, 1, 0, 0, 0],\r\n                [1, 1, 0, 1, 1],\r\n                [0, 0, 0, 0, 0],\r\n                [1, 1, 1, 0, 0],\r\n            ],\r\n            fillColor: '#4285f4',\r\n            hoverColor: '#c6dafc',\r\n            gridN: 5,\r\n            curSelectedItem: { rIndex: null, cIndex: null },\r\n            curSelectedList: [],\r\n            curHoverList: [],\r\n            connectedCollec: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    squareActions(rIndex, cIndex, type) {\r\n        if (type === \"click\" || type === \"mouseenter\") {\r\n            let isValid = false;\r\n            if ((type === \"click\" && (((this.state.curSelectedItem.rIndex !== rIndex || this.state.curSelectedItem.cIndex !== cIndex) && this.state.gridData[rIndex][cIndex] === 1) || (!this.state.curSelectedItem.rIndex && this.state.gridData[rIndex][cIndex] === 1)))\r\n                || (type === \"mouseenter\" && this.state.gridData[rIndex][cIndex] === 1))\r\n                isValid = true;\r\n            if (isValid) {\r\n                let selList = [];\r\n\r\n                // Find the connected squares in the connected collection \r\n                if (this.state.connectedCollec.length > 0) {\r\n                    this.state.connectedCollec.forEach((list) => {\r\n                        let index = list.findIndex((obj) => obj.rIndex === rIndex && obj.cIndex === cIndex);\r\n                        if (index > -1)\r\n                            selList = [...list];\r\n                    })\r\n                    if (type === \"click\")\r\n                        this.setState({ curSelectedList: selList, curSelectedItem: { rIndex, cIndex } });\r\n                    else\r\n                        this.setState({ curHoverList: selList });\r\n                }\r\n\r\n                // Find the connected squares by doing fresh search if it doesnot exist in the connected collection\r\n                if (selList.length === 0) {\r\n                    this.connectedList = [];\r\n                    this.connectedList.push({ rIndex, cIndex });\r\n                    for (let i = 0; i < this.connectedList.length; i++)\r\n                        this.findConnected(this.connectedList[i].rIndex, this.connectedList[i].cIndex);\r\n                    if (type === \"click\")\r\n                        this.setState({ curSelectedList: this.connectedList, curSelectedItem: { rIndex, cIndex }, connectedCollec: [...this.state.connectedCollec, this.connectedList] });\r\n                    else\r\n                        this.setState({ curHoverList: this.connectedList, connectedCollec: [...this.state.connectedCollec, this.connectedList] });\r\n                }\r\n            }\r\n        } else {\r\n            if (this.state.curHoverList.length > 0)\r\n                this.setState({ curHoverList: [] }); // On mouse leave\r\n        }\r\n    }\r\n\r\n    // Find the connected squares vertically or horizontally\r\n    findConnected(rIndex, cIndex) {\r\n        let existIndex = -1;\r\n        if (cIndex > 0 && this.state.gridData[rIndex][cIndex - 1] === 1) {\r\n            existIndex = this.connectedList.findIndex((obj) => obj.rIndex === rIndex && obj.cIndex === cIndex - 1);\r\n            (existIndex === -1) && this.connectedList.push({ rIndex: rIndex, cIndex: cIndex - 1 });\r\n        }\r\n        if (cIndex < (this.state.gridN - 1) && this.state.gridData[rIndex][cIndex + 1] === 1) {\r\n            existIndex = this.connectedList.findIndex((obj) => obj.rIndex === rIndex && obj.cIndex === cIndex + 1);\r\n            (existIndex === -1) && this.connectedList.push({ rIndex: rIndex, cIndex: cIndex + 1 });\r\n        }\r\n        if (rIndex > 0 && this.state.gridData[rIndex - 1][cIndex] === 1) {\r\n            existIndex = this.connectedList.findIndex((obj) => obj.rIndex === (rIndex - 1) && obj.cIndex === cIndex);\r\n            (existIndex === -1) && this.connectedList.push({ rIndex: rIndex - 1, cIndex: cIndex });\r\n        }\r\n        if (rIndex < (this.state.gridN - 1) && this.state.gridData[rIndex + 1][cIndex] === 1) {\r\n            existIndex = this.connectedList.findIndex((obj) => obj.rIndex === (rIndex + 1) && obj.cIndex === cIndex);\r\n            (existIndex === -1) && this.connectedList.push({ rIndex: rIndex + 1, cIndex: cIndex });\r\n        }\r\n    }\r\n\r\n    sliderChange(e) {\r\n        this.setState({ gridN: e.target.value });\r\n    }\r\n\r\n    fillColorChange(e) {\r\n        this.setState({ fillColor: e.target.value });\r\n    }\r\n\r\n    hoverColorChange(e) {\r\n        this.setState({ hoverColor: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 col-sm-12 col-xs-12 grid-container\" style={{ gridTemplateColumns: \"auto \".repeat(this.state.gridN).trim() }}>\r\n                        {\r\n                            this.state.gridData.slice(0, this.state.gridN).map((childArray, cIndex) =>\r\n                                childArray.slice(0, this.state.gridN).map((obj, index) => {\r\n                                    let hoverAffectIndex = -1, bgColor, textColor, count = 0;\r\n                                    if (this.state.curHoverList.length > 0)\r\n                                        hoverAffectIndex = this.state.curHoverList.findIndex((obj) => obj.rIndex === cIndex && obj.cIndex === index);\r\n                                    bgColor = obj === 1 ? (hoverAffectIndex > -1) ? this.state.hoverColor : this.state.fillColor : \"#FFF\";\r\n                                    textColor = bgColor;\r\n                                    if (this.state.curSelectedItem.rIndex === cIndex && this.state.curSelectedItem.cIndex === index) {\r\n                                        textColor = \"#FFF\";\r\n                                        count = this.state.curSelectedList.length;\r\n                                    }\r\n                                    return <div className=\"grid-item\" style={{ backgroundColor: bgColor, color: textColor }} key={(cIndex.toString() + index.toString())} onClick={this.squareActions.bind(this, cIndex, index, 'click')} onMouseEnter={this.squareActions.bind(this, cIndex, index, 'mouseenter')} onMouseLeave={this.squareActions.bind(this, cIndex, index, 'mouseleave')}>\r\n                                        {count}\r\n                                    </div>\r\n                                }))\r\n                        }\r\n                    </div>\r\n                    <div className=\"col-md-4 col-sm-12 col-xs-12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4\">\r\n                                Grid Size:\r\n                            </div>\r\n                            <div className=\"col-md-8 custom-input\">\r\n                                <input type=\"range\" min=\"1\" max=\"5\" value={this.state.gridN} className=\"slider\" id=\"gridSizeSlider\" onChange={this.sliderChange.bind(this)} />\r\n                                <label>{this.state.gridN} X {this.state.gridN}</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4\">\r\n                                Fill Color:\r\n                            </div>\r\n                            <div className=\"col-md-8 custom-input\">\r\n                                <input type=\"color\" id=\"fillColor\" className=\"color-picker\" onChange={this.fillColorChange.bind(this)} value={this.state.fillColor}></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 col-sm-6 col-xs-6\">\r\n                                Hover Color:\r\n                            </div>\r\n                            <div className=\"col-md-8 col-sm-6 col-xs-6 custom-input\">\r\n                                <input type=\"color\" id=\"hoverColor\" className=\"color-picker\" onChange={this.hoverColorChange.bind(this)} value={this.state.hoverColor}></input>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\nimport './App.css';\nimport Grid from './Grid';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}